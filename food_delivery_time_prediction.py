# -*- coding: utf-8 -*-
"""food_delivery_time_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bt0xa4UcgO-3PSwMnMeTX2jdd1D2OcFh
"""

!pip install tensorflow
!pip install keras

#imort the libraries
import numpy as np #for mathematical functions on multidimensional arrays
import pandas as pd #for data analysis
import plotly.express as px #create interactive visualizations
from sklearn.model_selection import train_test_split #for spliting the dataset

from keras.models import Sequential #to create a neural network
from keras.layers import Dense,LSTM #to add layers to neural netork

#importing and reading dataset
url='https://raw.githubusercontent.com/ataislucky/Data-Science/main/dataset/food_delivery.txt'
data=pd.read_csv(url)
data.sample(5)

data.info()

data.isnull().sum()

#Haversine Formula
R=6371 #Earth's radius in km
def degree_to_radians(degrees):
  #converting degrees to radians for easier calculations
  return degrees*(np.pi/180)

def distance_calculation(lat1,lon1,lat2,lon2):
  lat_difference=degree_to_radians(lat2-lat1) #latitude difference
  lon_difference=degree_to_radians(lon2-lon1) #longitude difference

  a1=np.sin(lat_difference/2)**2 + np.cos(degree_to_radians(lat1))
  a2=np.cos(degree_to_radians(lat2))*np.sin(lon_difference/2)**2
  a=a1*a2
  c=2*np.arctan2(np.sqrt(a),np.sqrt(1-a))
  return R*c

#create distance column in dataset and calculate the distance
data['distance']=np.nan

for i in range(len(data)):
  data.loc[i,'distance']=distance_calculation(data.loc[i,'Restaurant_latitude'],
                                              data.loc[i,'Restaurant_longitude'],
                                              data.loc[i,'Delivery_location_latitude'],
                                              data.loc[i,'Delivery_location_longitude'])

#Analyze the effect of distance and delivery time
figure=px.scatter(data_frame=data,
                  x="distance",
                  y="Time_taken(min)",
                  size="Time_taken(min)",
                  trendline="ols",
                  title="Rlationship Between Time Taken and Distance")
figure.show()

#Analyze the effect of Delivery person's Age and delivery time
figure=px.scatter(data_frame=data,
                  x="Delivery_person_Age",
                  y="Time_taken(min)",
                  size="Time_taken(min)",
                  color="distance",
                  trendline="ols",
                  title="Relationship between Delivery partner Age and Time Taken")
figure.show()

#Analyze the effect of Delivery person's Ratings and delivery time
figure=px.scatter(data_frame=data,
                  x="Delivery_person_Ratings",
                  y="Time_taken(min)",
                  size="Time_taken(min)",
                  color="distance",
                  trendline="ols",
                  title="Relationship between Delivery Patrner Rating and Time Taken")
figure.show()

# drawing a boxplot for different food items
figure=px.box(data,
              x="Type_of_vehicle",
              y="Time_taken(min)",
              color="Type_of_order",
              title="Relationship betweem type of vehivel and typr of order")
figure.show()

#Splitting the data into dependent and independent variables
x=np.array(data[["Delivery_person_Age",
                 "Delivery_person_Ratings",
                 "distance"]]) #dependent variables

y=np.array(data[["Time_taken(min)"]]) #independent variables

#splitting the data into training and testing sets
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=33)

#creating a neural network and adding layers to it using Sequential
model=Sequential()
model.add(LSTM(128,return_sequences=True,input_shape=(x_train.shape[1],1))) #input layer
model.add(LSTM(64,return_sequences=False)) #hidden layer 1
model.add(Dense(25)) #hidden layer 2
model.add(Dense(1)) #output layer
model.summary()

model.compile(optimizer='adam', loss='mean_squared_error') # Compiling the model
model.fit(x_train, y_train, batch_size=1, epochs=9) #traing the model on the training dataset

print("Food Delivery TIme Prediction using LSTM")
a=int(input("Delivery Partner Age : "))
b=float(input("Previous Delivery Ratings : "))  # Taking requried input
c=int(input("Total Distance : "))

features=np.array([[a,b,c]])
prediction=model.predict(features) # predicting the delivery time
print("Delivery Time Prediction in Minutes = ",prediction)